name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy safety
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check backend/
    
    - name: Type check with mypy
      run: |
        mypy backend/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Security check with safety
      run: |
        safety check
      continue-on-error: true
    
    - name: Run tests with pytest
      run: |
        pytest --cov=backend --cov-report=xml --cov-report=html
      continue-on-error: true  # Remove after adding tests
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t alert-triage-ai:test .
    
    - name: Test Docker image
      run: |
        docker run --rm alert-triage-ai:test python --version
